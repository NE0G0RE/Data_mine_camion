#!/usr/bin/env tsx

import { config } from "../server/config/index.js";
import { getDb } from "../server/db.js";

async function checkProject() {
  console.log("üîç V√©rification du projet Data Mine Camion...\n");

  // V√©rification de la configuration
  console.log("üìã Configuration:");
  console.log(`  - Port: ${config.port}`);
  console.log(`  - Environnement: ${config.nodeEnv}`);
  console.log(`  - Base de donn√©es: ${config.database.url}`);
  console.log(`  - CORS Origin: ${config.cors.origin}\n`);

  // V√©rification de la base de donn√©es
  try {
    console.log("üóÑÔ∏è  Test de connexion √† la base de donn√©es...");
    const db = await getDb();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie\n");
  } catch (error) {
    console.error("‚ùå Erreur de connexion √† la base de donn√©es:", error);
    console.log("\nüí° Solutions possibles:");
    console.log("  1. V√©rifiez que MySQL est d√©marr√©");
    console.log("  2. V√©rifiez la configuration DATABASE_URL dans .env");
    console.log("  3. Cr√©ez la base de donn√©es: CREATE DATABASE data_mine_camion;");
    console.log("  4. Lancez: npm run db:push");
    return;
  }

  // V√©rification des variables d'environnement
  console.log("üîß Variables d'environnement:");
  const requiredEnvVars = ["DATABASE_URL", "PORT", "NODE_ENV", "JWT_SECRET", "SESSION_SECRET"];
  let allEnvVarsPresent = true;

  for (const envVar of requiredEnvVars) {
    if (process.env[envVar]) {
      console.log(`  ‚úÖ ${envVar}: ${envVar === "JWT_SECRET" || envVar === "SESSION_SECRET" ? "***" : process.env[envVar]}`);
    } else {
      console.log(`  ‚ùå ${envVar}: Manquant`);
      allEnvVarsPresent = false;
    }
  }

  if (!allEnvVarsPresent) {
    console.log("\n‚ö†Ô∏è  Certaines variables d'environnement sont manquantes");
    console.log("   V√©rifiez votre fichier .env");
  } else {
    console.log("\n‚úÖ Toutes les variables d'environnement sont pr√©sentes");
  }

  console.log("\nüöÄ Projet pr√™t pour le d√©veloppement!");
  console.log("   Pour d√©marrer: npm run dev");
  console.log("   Pour construire: npm run build");
  console.log("   Pour initialiser l'admin: npm run setup:admin");
}

checkProject().catch(console.error);

